apply plugin: 'java'
apply plugin: 'war'

version = '1.0'
sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

repositories {
    mavenCentral()
    maven{ url "https://clojars.org/repo" }
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.11'
    compile 'org.jsoup:jsoup:1.8.1'
    compile group: 'com.google.guava', name: 'guava', version: '15.0'
    compile "com.aliasi:lingpipe:4.0.1"
    compile 'com.google.code.gson:gson:2.2.4'
    compile 'org.slf4j:slf4j-api:1.7.10'
    compile 'org.slf4j:slf4j-log4j12:1.7.10'
    compile 'org.apache.commons:commons-exec:1.3'
    compile "commons-cli:commons-cli:1.2"
    compile 'javax.servlet:javax.servlet-api:3.1.0'
    compile 'org.eclipse.jetty:jetty-server:9.2.7.v20150116'
    compile "org.eclipse.jetty:jetty-servlet:9.2.7.v20150116"
    compile 'org.eclipse.jetty:jetty-annotations:9.2.7.v20150116'
    compile 'org.eclipse.jetty:jetty-webapp:9.2.7.v20150116'
    compile 'org.eclipse.jetty:apache-jsp:9.2.7.v20150116'
    compile 'org.eclipse.jetty:apache-jstl:9.2.7.v20150116'
    compile 'org.eclipse.jetty:jetty-annotations:9.2.7.v20150116'
    compile 'org.eclipse.jetty:jetty-webapp:9.2.7.v20150116'
    compile 'org.eclipse.jetty:apache-jsp:9.2.7.v20150116'
    compile 'org.eclipse.jetty:apache-jstl:9.2.7.v20150116'
    compile 'org.eclipse.jetty:jetty-servlets:9.2.7.v20150116'
    compile 'org.glassfish.jersey.core:jersey-server:2.17'
    compile 'org.glassfish.jersey.core:jersey-client:2.17'
    compile 'org.glassfish.jersey.containers:jersey-container-servlet-core:2.17'
    compile 'org.glassfish.jersey.containers:jersey-container-jetty-http:2.17'
    compile 'org.glassfish.jersey.media:jersey-media-json-jackson:2.17'
    compile 'org.glassfish.jersey.media:jersey-media-moxy:2.17'
    compile 'org.glassfish.jersey.media:jersey-media-multipart:2.17'
    compile 'com.fasterxml.jackson.core:jackson-core:2.5.1'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.5.1'
    compile 'com.fasterxml.jackson.core:jackson-annotations:2.5.1'
    compile 'com.google.inject:guice:3.0'
    compile 'com.google.inject.extensions:guice-servlet:3.0'
    compile "com.squarespace.jersey2-guice:jersey2-guice:0.10"
    compile 'org.reflections:reflections:0.9.9'
    compile 'com.sendgrid:sendgrid-java:2.2.1'
    compile 'cc.mallet:mallet:2.0.7'
    compile 'trove:trove:2.1.1'
}
war {
    zip64 true
}

task runBenchmark(type: JavaExec) {
    File workingDir = new File('Pipeline/')
    main = 'com.skroll.benchmark.ClassifierBenchmark'
    classpath = sourceSets.main.runtimeClasspath
}


task trainBenchmarkModelWithWeight(type: JavaExec) {
    args = ['--trainBenchmarkModelWithWeight', 'build/resources/main/preEvaluated/']
    File workingDir = new File('Pipeline/')
    main = 'com.skroll.benchmark.BenchmarkModelTrainer'
    classpath = sourceSets.main.runtimeClasspath
}



task trainer (type: JavaExec) {
    main = 'com.skroll.trainer.Trainer'
    File workingDir = new File('Pipeline/')
    classpath = sourceSets.main.runtimeClasspath
    jvmArgs = [ '-Xms1024m', '-Xmx2028m']
    if(System.getProperty("exec.args") == null) {
        args '-c help'
    }
    if(System.getProperty("exec.args") != null) {
        args System.getProperty("exec.args").split()
    }

}

task convertTrainingWeight(type: JavaExec) {
    File workingDir = new File('Pipeline/')
    main = 'com.skroll.util.ConvertTrainingWeight'
    classpath = sourceSets.main.runtimeClasspath
    if(System.getProperty("exec.args") != null) {
        args System.getProperty("exec.args").split()
    }
}


//create a single Jar with all dependencies
task fatJar(type: Jar) {
    zip64 true
    manifest {
        attributes 'Implementation-Title': 'Skroll Fat Jar',
                'Implementation-Version': version,
                'Main-Class': 'com.skroll.rest.WebServer'
    }
    baseName = project.name + '-all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA'
    with jar
}

task cleanModels(type: Delete) {
    delete "src/test/resources/analyzer/train/models"
}

task createTestDirectories {
    File modelFolder = new File("Pipeline/build/resources/test/train/models/")
    File preEvaluatedFolder = new File("Pipeline/build/resources/test/document/documentFactory/")
    File benchmarkFolder = new File("Pipeline/build/resources/test/document/benchmark/")
    modelFolder.mkdir()
    preEvaluatedFolder.mkdir()
    benchmarkFolder.mkdir()
}

task start(type: JavaExec) {
    File workingDir = new File('Pipeline/')
    main = 'com.skroll.rest.WebServer'
    classpath = sourceSets.main.runtimeClasspath
}

task startProd(type: JavaExec) {
    File workingDir = new File('Pipeline/')
    args = ['--port', '8088', '--baseuri', 'src/main/webapp/build']
    main = 'com.skroll.rest.WebServer'
    classpath = sourceSets.main.runtimeClasspath
}

import org.apache.tools.ant.taskdefs.condition.Os
task buildProdApp(type: Exec) {
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        commandLine 'cmd', '/c', 'gulp', '--gulpfile', 'src/main/webapp/gulpfile.js', 'build'
    }else {
        commandLine 'gulp', '--gulpfile', 'src/main/webapp/gulpfile.js', 'build'
    }
}

task npmInstall(type: Exec) {
    if (Os.isFamily(Os.FAMILY_WINDOWS)){
        commandLine 'cmd', '/c', 'npm', '--prefix', 'src/main/si', 'install'
    } else {
        commandLine 'npm', '--prefix', 'src/main/si', 'install'
    }
}

task npmClean(type: Delete) {
    delete "src/main/si/node_modules"
}



test.dependsOn npmInstall
compileJava.dependsOn npmInstall

clean.dependsOn cleanModels
clean.dependsOn npmClean
test.dependsOn createTestDirectories
startProd.dependsOn(buildProdApp)
